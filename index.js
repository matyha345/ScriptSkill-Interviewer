require('dotenv').config()

// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ grammy
const {
	Bot,
	Keyboard,
	InlineKeyboard,
	GrammyError,
	HttpError
} = require('grammy')


// –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ –æ—Ç–≤–µ—Ç–∞–º–∏
const { getRandomQuestion, getCorrectAnswer } = require('./utils')

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API-–∫–ª—é—á–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const bot = new Bot(process.env.BOT_API_KEY)

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async ctx => {
	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã
	const startKeyboard = new Keyboard()
		.text('HTML')
		.text('CSS')
		.row()
		.text('JavaScript')
		.text('React')
		.resized()

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	await ctx.reply(
		'Hi! –Ø - Frontend Interview ü§ñ \n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—Ç–∞—Ç—å –∫—É–ª—Ö–∞—Ü–∫–µ—Ä–æ–º ü•∑'
	)
	await ctx.reply('–í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–µ–Ω—é üëá –ù–µ–ø–∏—Å—å!', {
		reply_markup: startKeyboard
	})
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–∞
bot.hears(['HTML', 'CSS', 'JavaScript', 'React'], async ctx => {
	const topic = ctx.message.text.toLocaleLowerCase()
	const question = getRandomQuestion(topic)

	let inlineKeyboard

	// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
	if (question.hasOptions) {
		const buttonRows = question.options.map(option => {
			return [
				InlineKeyboard.text(
					option.text,
					JSON.stringify({
						type: `${topic} - option`,
						isCorrect: option.isCorrect,
						questionId: question.id
					})
				)
			]
		})

		inlineKeyboard = InlineKeyboard.from(buttonRows)
	} else {
		inlineKeyboard = new InlineKeyboard().text(
			'–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç',
			JSON.stringify({
				type: topic,
				questionId: question.id
			})
		)
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
	await ctx.reply(question.text, {
		reply_markup: inlineKeyboard
	})
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
bot.on('callback_query:data', async ctx => {
	const callbackData = JSON.parse(ctx.callbackQuery.data)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ –∏ —Ç–µ–º–µ
	const currentTopic = callbackData.type.split(' - ')[0]
	const currentQuestionId = callbackData.questionId

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
	if (!callbackData.type.includes('option')) {
		const answer = getCorrectAnswer(callbackData.type, callbackData.questionId)

		await ctx.reply(answer, {
			parse_mode: 'HTML',
			disable_web_page_preview: true
		})

		// –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Ç–æ–π –∂–µ —Ç–µ–º—ã
		const nextQuestion = getRandomQuestion(currentTopic)

		// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		let inlineKeyboard
		if (nextQuestion.hasOptions) {
			const buttonRows = nextQuestion.options.map(option => {
				return [
					InlineKeyboard.text(
						option.text,
						JSON.stringify({
							type: `${currentTopic} - option`,
							isCorrect: option.isCorrect,
							questionId: nextQuestion.id
						})
					)
				]
			})
			inlineKeyboard = InlineKeyboard.from(buttonRows)
		} else {
			inlineKeyboard = new InlineKeyboard().text(
				'–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç',
				JSON.stringify({
					type: currentTopic,
					questionId: nextQuestion.id
				})
			)
		}
		await ctx.reply('---üëÜ–û—Ç–≤–µ—ÇüëÜ--- \n \n---üëá–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüëá---')
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
		await ctx.reply(nextQuestion.text, {
			reply_markup: inlineKeyboard
		})

		await ctx.answerCallbackQuery()
		return
	}

	if (callbackData.isCorrect) {
		await ctx.reply('–í–µ—Ä–Ω–æ üëå')

		// –í—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Ç–æ–π –∂–µ —Ç–µ–º—ã
		const nextQuestion = getRandomQuestion(currentTopic)

		// –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
		let inlineKeyboard
		if (nextQuestion.hasOptions) {
			const buttonRows = nextQuestion.options.map(option => {
				return [
					InlineKeyboard.text(
						option.text,
						JSON.stringify({
							type: `${currentTopic} - option`,
							isCorrect: option.isCorrect,
							questionId: nextQuestion.id
						})
					)
				]
			})
			inlineKeyboard = InlineKeyboard.from(buttonRows)
		} else {
			inlineKeyboard = new InlineKeyboard().text(
				'–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç',
				JSON.stringify({
					type: currentTopic,
					questionId: nextQuestion.id
				})
			)
		}
		await ctx.reply('---üëÜ–û—Ç–≤–µ—ÇüëÜ--- \n \n---üëá–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Åüëá---')
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
		await ctx.reply(nextQuestion.text, {
			reply_markup: inlineKeyboard
		})

		await ctx.answerCallbackQuery()
		return
	}

	const answer = getCorrectAnswer(currentTopic, currentQuestionId)
	await ctx.reply(`*–ù–µ–≤–µ—Ä–Ω–æ*!!! ‚ùå \n–Ø —Ç–∞–∫ –∏ –¥—É–º–∞–ª —á—Ç–æ —Ç—ã –ù–µ–ø–∏—Å—å ü´µ \n*–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: ${answer}* üëÄ`, { parse_mode: 'Markdown' })
	await ctx.answerCallbackQuery()
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch(err => {
	const ctx = err.ctx
	console.error(`Error while handling update ${ctx.update.update_id}:`)
	const e = err.error
	if (e instanceof GrammyError) {
		console.error('Error in request:', e.description)
	} else if (e instanceof HttpError) {
		console.error('Could not contact Telegram:', e)
	} else {
		console.error('Unknown error:', e)
	}
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start()
